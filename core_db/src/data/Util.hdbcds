using Core as EPM;

context Util {
    @Comment : 'Constants - like ABAP Domains'
    entity Constants {
            @Comment : 'Domain Name'
        key DOMAIN      : String(30);

            @Comment : 'Fixed Value'
        key FIXEDVALUE  : String(30);

            @Comment : 'Language'
        key LANGUAGE    : EPM.ABAPLanguage;

            @Comment : 'Description'
            DESCRIPTION : EPM.MString;
    };

    @Comment : 'Long Texts'
    entity Texts {
            @Comment : 'Text ID'
        key TEXTID      : Integer generated by default as identity(start with 1000000000 increment by 1 no minvalue maxvalue 1999999999 no cache no cycle);

            @Comment : 'Language'
            LANGUAGE    : EPM.ABAPLanguage;

            @Comment : 'ISO Language Key'
            ISOLANGUAGE : EPM.ISOLanguageT;

            @Comment : 'Text'
            TEXT        : EPM.VLString null;
    }
    technical configuration {
        fulltext index FTI_TEXT on (TEXT)
            async
            search only off;
    };

    @Comment : 'Message - like ABAP T100 table'
    entity Messages {
            @Comment : 'Message Class'
        key MESSAGECLASS  : String(20);

            @Comment : 'Message Number'
        key MESSAGENUMBER : String(3);

            @Comment : 'Language'
        key LANGUAGE      : EPM.ISOLanguageT;

            @Comment : 'Description'
            DESCRIPTION   : EPM.LString null;

            @Comment : 'Long Text'
            TEXT          : LargeString null;
    };

    @Comment : 'Server Side Cookies'
    entity SSCOOKIE {
            @Comment : 'Session ID'
        key SESSIONID   : Integer generated by default as identity(start with 1000000000 increment by 1 no minvalue maxvalue 1999999999 no cache no cycle);

            @Comment : 'Cookie Name'
        key NAME        : String(30);

            @Comment : 'Application'
        key APPLICATION : String(128);

            @Comment : 'Expiration Timestamp'
            EXPIRY      : UTCTimestamp;

            @Comment : 'Cookie Data'
            DATA        : LargeString;
    };

    @Comment : 'Notes'
    entity Notes {
            @Comment : 'Note ID'
        key NOTEID    : EPM.BusinessKey;

            @Comment : 'Link ID'
            LINKID    : EPM.BusinessKey;

            @Comment : 'Note Author'
            AUTHOR    : String(30);

            @Comment : 'Text'
            TEXT      : EPM.LString;

            @Comment : 'Create Date'
            CREATEDAT : EPM.SDate;

            @Comment : 'Thumbnail Image URL'
            THUMBNAIL : EPM.LString;
    };

    @Comment : 'Series Data'
    entity SeriesData {
            @Comment : 'Set ID'
        key setid  : Integer generated always as identity(start with 1000000000 increment by 1 no minvalue maxvalue 1999999999 no cache no cycle);

            @Comment : 'Timestamp'
        key t      : UTCTimestamp;

            @Comment : 'Factor'
            FACTOR : Decimal(9, 6);

        series(
        series key(setid)
        period for series(t)
        equidistant increment by interval 1 hour
        )
    };

    @Comment : 'Series Data'
    entity MySeriesEntity {
            @Comment : 'Set ID'
        key setId : Integer generated always as identity(start with 1000000000 increment by 1 no minvalue maxvalue 1999999999 no cache no cycle);

            @Comment : 'Timestamp'
        key t     : UTCTimestamp;

            @Comment : 'Series Value'
            value : Decimal(10, 4);

        series (
            series key (setId)
            period for series (t)
            equidistant increment by interval 0.1 second
        )
    };

    //for SHINE 10.3
    @Comment : 'Data Generator Log'
    temporary entity DataGenerationTime {
        @Comment : 'Start Time'
        STARTTIME : Integer64;

        @Comment : 'End Time'
        ENDTIME   : Integer64;
    }
    technical configuration {
        row store;
    };

    @Comment : 'Attachments'
    entity Attachments {
            @Comment : 'Note ID'
        key NOTEID      : EPM.BusinessKey;

            @Comment : 'Link ID'
            LINKID      : EPM.BusinessKey;

            @Comment : 'Attachment Type'
            TYPE        : String(30);

            @Comment : 'Title'
            TITLE       : EPM.LString;

            @Comment : 'Created Date'
            CREATEDAT   : EPM.SDate;

            @Comment : 'Description Text'
            DESCRIPTION : EPM.LString;

            @Comment : 'Size'
            SIZE        : String(40);
    };

    @Comment : 'Attachments View'
    define view AttachementsView as
        select from Attachments
        {
            NOTEID,
            TYPE        as "Type",
            TITLE       as "Title",
            CREATEDAT,
            DESCRIPTION as "Description",
            SIZE        as "Size",
            LINKID
        };

    @Comment : 'Notes View'
    define view NotesView as
        select from Notes
        {
            NOTEID,
            AUTHOR     as "Author",
            TEXT       as "Text",
            CREATEDAT,
            THUMBNAIL  as "Thumbnail",
            LINKID
        };

    @Search.searchable : true
    @Comment           : 'Long Texts View'
    define view textsView as
        select from Util.Texts as B
        {
            B.TEXTID,
            B.LANGUAGE,
            B.ISOLANGUAGE,

            @Search.defaultSearchElement : true
            B.TEXT

            //SP09 requirement - Order By Clause
        }
        order by
            B.TEXTID;
};